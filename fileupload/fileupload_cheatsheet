JAVA - 파일 업로드 X 
=> 라이브러리 => 업로드 O 

2가지
1) cos.jar (O' Reilly) => 간편! / 파일명 핸들링이 어려움
2) commons-fileupload.jar (Apache) => 복잡 / 디테일 작업 

Spring ~ 2.0 => cos.jar => CosMultipartResolver
Spring 2.5 ~ => commons

=> 라이선스 
구글에 cos.jar검색 

apache-tomcat-8.5.53 > webapps > ROOT > index.jsp

<%@ page Language="java" contentType="text/html; charset=UTF-8" %>
<form action="upload.jsp" method="POST" enctype="multipart/form-data">
<input type="file" name="userfile">
<input type="submit" value="UPLOAD">
</form>


<%@ page Language="java" contentType="text/html; charset=UTF-8" %>
<%@ page import="com.oreilly.servlet.MultipartRequest" %>
<% 
  String path = request.getRealPath("upload");
  
  MultipartRequest multi = new MultipartRequest(request, path, 1024*10, "UTF-8");
  String filename = path + "\\" + multi.getFilesystemName("userfile");
  String name = multi.getParameter("name");
  out.println(name);
%>

<li>업로드 성공 : <%filename%></li>

####웹쉘 종류 ####

JSP 웹쉘 : JSP File Browser
PHP 웹쉘 : C99shell, r57shell

웹쉘 깃허브 
https://github.com/tennc/webshell
jsp/jsp_File_browser.jsp 웹쉘 

웹쉘 탐지 솔루션 
MetiEye
Anti-webshell
F1 WSFinder
WSS ShellMonitor 통합웹서버보안솔루션 


###언어별 시스템 함수 ##############
언어    시스템 함수 
PHP     passthru, system, '(백 쿼터), execl, popen, escapeshellcmd, eval, shell_exec, assert
JSP     Runtime.getRuntime().exec(""), processBuilder("")
ASP     CreateObject("wscript.shell").exec("cmd/c" & cmd), eval, Execute
ASPX    WinExec(), ShellExecute()


####################################os 정보출력 JSP 파일####################################
<%
	out.println(System.getProperty("os.name").toLowerCase());
%>

###md5.php###
<?php
	$input = "loze";
	echo md5($input);
?>

###공격대상 탐색###
공격자 -> 페이지 -> 업로드 
공격자 -----------> 업로드

CASE1) 정상적인 접근 방법
 1) 게시판을 통한 업로드 확인 
 2) 이미지 업로드기능 확인 
 3) 이력서 페이지 내 업로드 기능 확인 

CASE2) 비정상적인 접근 방법
 1) 웹 페이지 내 업로드 관련 코드 찾기 
   - .js 파일 내 업로드 폼 관련 정보 확인 
   - 주석 제거 후 업로드 폼 활성화
   
 2) 파일 다운로드 취약점을 통한 접근
   - /common/fileDownload.jsp?path=../common&filename=fileUpload.jsp
   - 업로드폼은 없는데 업로드 모듈만 있는 경우는 업로드기능을 없애놓음
   
 3) WAS 관리자 콘솔 & 관리자 페이지 접근
   - URL 유추(admin, adm, manager, rhksflwk, administrator, root, www1.victim.co.kr/admin)
   - 관리 콘솔페이지(tomcat manager, jeus 관리콘솔 페이지)
   - war(web app archive)업로드 후 war 디플로이로 압축해제
   - WAS별 관리 콘솔 URL 
    : tomcat - http://url.manager.html
    : jeus - http://url:9743/webadmin
             http://url:9744/webadmin
    : Weblogic - http://url:7001/console
    : WebSphere - http://url:9060/ibm/console
    : Jboss - http://url:9990/admin-console
    	    
 4) 접근 권한 없는 업로드 폼 페이지 직접 접근
   공격자 게시판 목록 -> 게시글 작성 -> 게시글 작성 액션 페이지 -> webshell.jsp
   - 게시글 작성 페이지 직접 접근(boardList.do, boardwrite.do, boardcreate.do, boardReg.do boardRegister.do,p010101)
   
 5) 에디터 샘플 페이지 혹은 기본 페이지 접근 (fck에디터-> ck에디터로 바뀜)
   - /fckeditor/, /FCKeditor/, /ckeditor/, /CKEditor/, /Ckeditor/, /editor/
   - /디렉터리/fckeditor.js, /fckconfig.js, /ckeditor.js, /config.js
   - www.test.co.kr/js/ 입력해서 응답값과 /aaa/ 디렉터리 응답 비교하여 확인
   - /디렉터리/_sample/index.html, /디렉터리/sample/index.html
    ex) /디렉터리/editor/filemanager/browser/default/browser.html?Type=Image&Connector=connectors/jsp/connector.jsp
        /디렉터리/editor/filemanager/browser/default/browser.html?Type=File&Connector=[host]/디렉터리/editor/filemanager/connectors/jsp/connector.jsp?Command=GetFoldersAndFiles&Type=Images&CurrentFolder=
	/디렉터리/editor/filemanager/browser/default/browser.html
	/디렉터리/editor/filemanager/browser/default/connectors/test.html
        파이썬으로 사전파일 스크립트 만듬
   - CKEditor는 웹 디렉터리 상으로 업로드가 되며, 경로를 반환하기 때문에 업로드 경로를 파악할 필요가 없다.
   
 6) 구글 해킹을 통한 업로드 페이지 접근
    공격자 -> 구글 -> 업로드 페이지 
   - 리뉴얼됬을 경우 구글해킹으로 이전버전을 볼 수 있음, 구글의 캐쉬페이지에 저장된 페이지가 있음 
   
 7) 유추를 통한 직접 접근(위 방법이 다안될 경우 최후 수단)
   - 파일 업로드 모듈 URL 유추를 통한 접근 (FileUpload.jsp)
   
 
 
 
 
 

























